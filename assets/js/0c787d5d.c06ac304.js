"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5620],{3905:(t,e,l)=>{l.d(e,{Zo:()=>c,kt:()=>m});var n=l(67294);function r(t,e,l){return e in t?Object.defineProperty(t,e,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[e]=l,t}function a(t,e){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),l.push.apply(l,n)}return l}function d(t){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{};e%2?a(Object(l),!0).forEach((function(e){r(t,e,l[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(l,e))}))}return t}function u(t,e){if(null==t)return{};var l,n,r=function(t,e){if(null==t)return{};var l,n,r={},a=Object.keys(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||(r[l]=t[l]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(t,l)&&(r[l]=t[l])}return r}var o=n.createContext({}),i=function(t){var e=n.useContext(o),l=e;return t&&(l="function"==typeof t?t(e):d(d({},e),t)),l},c=function(t){var e=i(t.components);return n.createElement(o.Provider,{value:e},t.children)},s="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var l=t.components,r=t.mdxType,a=t.originalType,o=t.parentName,c=u(t,["components","mdxType","originalType","parentName"]),s=i(l),p=r,m=s["".concat(o,".").concat(p)]||s[p]||k[p]||a;return l?n.createElement(m,d(d({ref:e},c),{},{components:l})):n.createElement(m,d({ref:e},c))}));function m(t,e){var l=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=l.length,d=new Array(a);d[0]=p;var u={};for(var o in e)hasOwnProperty.call(e,o)&&(u[o]=e[o]);u.originalType=t,u[s]="string"==typeof t?t:r,d[1]=u;for(var i=2;i<a;i++)d[i]=l[i];return n.createElement.apply(null,d)}return n.createElement.apply(null,l)}p.displayName="MDXCreateElement"},17113:(t,e,l)=>{l.r(e),l.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>k,frontMatter:()=>a,metadata:()=>u,toc:()=>i});var n=l(87462),r=(l(67294),l(3905));const a={},d="typed_dicts",u={unversionedId:"test/core/typed_dicts",id:"test/core/typed_dicts",title:"typed_dicts",description:"maxopticssdk.core.typeddicts.BoundaryDict",source:"@site/docs/test/core/typed_dicts.md",sourceDirName:"test/core",slug:"/test/core/typed_dicts",permalink:"/my-website/docs/test/core/typed_dicts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/test/core/typed_dicts.md",tags:[],version:"current",frontMatter:{},sidebar:"testSidebar",previous:{title:"type_alias",permalink:"/my-website/docs/test/core/type_alias"},next:{title:"interface",permalink:"/my-website/docs/test/core/waveform/interface"}},o={},i=[{value:"maxoptics_sdk.core.typed_dicts.BoundaryDict",id:"maxoptics_sdkcoretyped_dictsboundarydict",level:2},{value:"maxoptics_sdk.core.typed_dicts.FDEDict",id:"maxoptics_sdkcoretyped_dictsfdedict",level:2},{value:"maxoptics_sdk.core.typed_dicts.GeometryDict",id:"maxoptics_sdkcoretyped_dictsgeometrydict",level:2},{value:"maxoptics_sdk.core.typed_dicts.MaterialDict",id:"maxoptics_sdkcoretyped_dictsmaterialdict",level:2}],c={toc:i},s="wrapper";function k(t){let{components:e,...l}=t;return(0,r.kt)(s,(0,n.Z)({},c,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"typed_dicts"},"typed_dicts"),(0,r.kt)("h2",{id:"maxoptics_sdkcoretyped_dictsboundarydict"},"maxoptics_sdk.core.typed_dicts.BoundaryDict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class maxoptics_sdk.core.typed_dicts.BoundaryDict(*args, **kwargs)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bases"),": dict"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Parameter"),(0,r.kt)("td",null,"Type"),(0,r.kt)("td",null,"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"pml_kappa"),(0,r.kt)("td",null,"int"),(0,r.kt)("td",null,"The kappa value for PML (Perfectly Matched Layer)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"pml_layer"),(0,r.kt)("td",null,"int"),(0,r.kt)("td",null,"The number of layers in PML")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"pml_polynomial"),(0,r.kt)("td",null,"int"),(0,r.kt)("td",null,"The polynomial degree of PML")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"pml_sigma"),(0,r.kt)("td",null,"int"),(0,r.kt)("td",null,"The sigma value for PML")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"x_max"),(0,r.kt)("td",null,"Literal['metal', 'PEC', 'PML']"),(0,r.kt)("td",null,"The maximum value for x boundary condition")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"x_min"),(0,r.kt)("td",null,"Literal['metal', 'PEC', 'PML']"),(0,r.kt)("td",null,"The minimum value for x boundary condition")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"y_max"),(0,r.kt)("td",null,"Literal['metal', 'PEC', 'PML']"),(0,r.kt)("td",null,"The maximum value for y boundary condition")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"y_min"),(0,r.kt)("td",null,"Literal['metal', 'PEC', 'PML']"),(0,r.kt)("td",null,"The minimum value for y boundary condition")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"z_max"),(0,r.kt)("td",null,"Literal['metal', 'PEC', 'PML']"),(0,r.kt)("td",null,"The maximum value for z boundary condition")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"z_min"),(0,r.kt)("td",null,"Literal['metal', 'PEC', 'PML']"),(0,r.kt)("td",null,"The minimum value for z boundary condition"))),(0,r.kt)("h2",{id:"maxoptics_sdkcoretyped_dictsfdedict"},"maxoptics_sdk.core.typed_dicts.FDEDict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class maxoptics_sdk.core.typed_dicts.FDEDict(*args, **kwargs)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bases"),": dict"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Parameter"),(0,r.kt)("td",null,"Type"),(0,r.kt)("td",null,"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"calculate_group_index"),(0,r.kt)("td",null,"bool"),(0,r.kt)("td",null,"Flag indicating whether to calculate the group index")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"detailed_dispersion_calculation"),(0,r.kt)("td",null,"bool"),(0,r.kt)("td",null,"Flag indicating whether to perform detailed dispersion calculation")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"number_of_trial_modes"),(0,r.kt)("td",null,"int"),(0,r.kt)("td",null,"Number of trial modes for dispersion calculation")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"use_max_index"),(0,r.kt)("td",null,"bool"),(0,r.kt)("td",null,"Flag indicating whether to use the maximum index for dispersion calculation"))),(0,r.kt)("h2",{id:"maxoptics_sdkcoretyped_dictsgeometrydict"},"maxoptics_sdk.core.typed_dicts.GeometryDict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class maxoptics_sdk.core.typed_dicts.GeometryDict(*args, **kwargs)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bases"),": dict"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Parameter"),(0,r.kt)("td",null,"Type"),(0,r.kt)("td",null,"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"rotate_x"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"Rotation angle around the x-axis")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"rotate_y"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"Rotation angle around the y-axis")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"rotate_z"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"Rotation angle around the z-axis")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"x"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The value of x")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"x_max"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The maximum value for x")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"x_min"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The minimum value for x")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"x_span"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The span of x")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"y"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The value of y")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"y_max"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The maximum value for y")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"y_min"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The minimum value for y")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"y_span"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The span of y")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"z"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The value of z")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"z_max"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The maximum value for z")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"z_min"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The minimum value for z")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"z_span"),(0,r.kt)("td",null,"float"),(0,r.kt)("td",null,"The span of z"))),(0,r.kt)("h2",{id:"maxoptics_sdkcoretyped_dictsmaterialdict"},"maxoptics_sdk.core.typed_dicts.MaterialDict"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class maxoptics_sdk.core.typed_dicts.MaterialDict(*args, **kwargs)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bases"),": dict"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"Parameter"),(0,r.kt)("td",null,"Type"),(0,r.kt)("td",null,"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"material"),(0,r.kt)("td",null,"Material"),(0,r.kt)("td",null,"The material used")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"mesh_order"),(0,r.kt)("td",null,"int"),(0,r.kt)("td",null,"The mesh order")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"override_mesh_order"),(0,r.kt)("td",null,"bool"),(0,r.kt)("td",null,"Flag indicating whether to override the mesh order"))))}k.isMDXComponent=!0}}]);